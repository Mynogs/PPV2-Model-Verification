-- 19.09.2017 16:03:36 AR V1.0a

generic = {
  parameter = {
    bound = 1.0,
    equal = false
  },

  init = function(self)
    block.setInputsPinCount(2)
    block.setInputPinName(1, 'm')
    block.setInputPinName(2, 'a')
    block.setOutputsPinCount(0)
    block.modifyFlags('SupressStartFunctionCall', true)
    block.modifyFlags('SupressStopFunctionCall', true)
  end,

  open = function(self)
    gui.add('Info', 'Info', 'Check dynamic lower bound', 'Check that one signal is always less than another signal')
    gui.add('CheckBox', 'CheckBoxEqual', 'Include equal')
    gui.set('CheckBoxEqual', 'Checked', self.parameter.equal)
    gui.setSize()
  end,

  apply = function(self)
    self.parameter.equal = gui.get('CheckBoxEqual', 'Checked')
  end,

  close = function()
  end,

  avatar = function(self)
    return block.getDefaultAvatar(0x00, "", [[
      draw.setColorA(0.7, 0.7, 0.7)
      draw.box(px(30), py(50), px(60), py(20))
      draw.setColorA(0, 0, 0)
      draw.line(px(20), py(80), px(90), py(80))
      draw.line(px(30), py(20), px(30), py(90))
      draw.line(px(30), py(50), px(90), py(50))
      local p = {}
      for i = 0, 60, 0.1 do
        p[#p + 1] = px(30 + i)
        p[#p + 1] = py(40 + math.cos(i / 15 * math.pi) * 10)
      end
      draw.line(table.unpack(p))
    ]])
  end,

  generate = function(self)
    local source =
      [==[
        return {

          step = function(m, a)
            if a CONDITION m then
              finish(block, "Check CONDITION m detected")
            end
          end

        }
      ]==]
    local replaces = {
      ['CONDITION'] = self.parameter.equal and '<=' or '<'
    }
    return string.gsub(source, '%a+', replaces)
  end,

}

